package com.klef.dev.controller;


import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;


import com.klef.dev.entity.Customer;
import com.klef.dev.service.CustomerService;


@RestController
@RequestMapping("/customerapi/")
@CrossOrigin(origins = "*")
public class CustomerController {


@Autowired
private CustomerService customerService;


@GetMapping("/")
public String home() { return "Customer API running"; }


@PostMapping("/add")
public ResponseEntity<Customer> addCustomer(@RequestBody Customer customer) {
Customer saved = customerService.addCustomer(customer);
return new ResponseEntity<>(saved, HttpStatus.CREATED);
}


@GetMapping("/all")
public ResponseEntity<List<Customer>> getAll() {
return new ResponseEntity<>(((Object) customerService).getAllCustomers(), HttpStatus.OK);
}


@GetMapping("/get/{id}")
public ResponseEntity<?> getById(@PathVariable int id) {
Customer c = customerService.getCustomerById(id);
if (c != null) return new ResponseEntity<>(c, HttpStatus.OK);
return new ResponseEntity<>("Customer with ID " + id + " not found.", HttpStatus.NOT_FOUND);
}


@PutMapping("/update")
public ResponseEntity<?> update(@RequestBody Customer customer) {
Customer existing = customerService.getCustomerById(customer.getId());
if (existing != null) return new ResponseEntity<>(customerService.updateCustomer(customer), HttpStatus.OK);
return new ResponseEntity<>("Cannot update. Customer not found.", HttpStatus.NOT_FOUND);
}


@DeleteMapping("/delete/{id}")
public ResponseEntity<String> delete(@PathVariable int id) {
Customer existing = customerService.getCustomerById(id);
if (existing != null) {
customerService.deleteCustomerById(id);
return new Respons