name: CI/CD to AWS EC2 Instance with Docker

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_SECRET }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./BACKEND/airlinemanagement
          file: ./BACKEND/airlinemanagement/backend.Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USER }}/dockeraws-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontendapp
          file: ./frontendapp/frontend.Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USER }}/dockeraws-frontend:latest

      - name: Save EC2 private key
        run: |
          echo "${{ secrets.AWS_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy to AWS EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ secrets.AWS_IP }} << 'EOF'
            # Clone the repo if it doesn't exist, otherwise navigate into it
            if [ ! -d "DOCKER-GITACTIONS-AWS" ]; then
              git clone https://github.com/${{ github.repository }}.git DOCKER-GITACTIONS-AWS
            fi
            cd DOCKER-GITACTIONS-AWS
            
            # Pull the latest changes from main branch
            git pull origin main
            
            # Use the credentials stored in secrets to log in to Docker Hub
            # This ensures the EC2 instance can pull your private images
            echo "${{ secrets.DOCKER_SECRET }}" | sudo docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
            
            # Pull the newest images from Docker Hub
            sudo docker-compose pull
            
            # Stop and remove old containers, then start new ones
            sudo docker-compose down
            sudo docker-compose up -d --build
          EOF